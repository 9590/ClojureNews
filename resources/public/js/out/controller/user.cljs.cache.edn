;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name controller.user, :imports nil, :requires {validation cljc.validation, ajax.core ajax.core, secretary secretary.core, reagent.core reagent.core, r reagent.core, ajax ajax.core, cljc.validation cljc.validation, secretary.core secretary.core, util.view util.view, view.user view.user}, :uses {PUT ajax.core, POST ajax.core, GET ajax.core}, :defs {handler {:protocol-inline nil, :meta {:file "/Users/ertugrulcetin/IdeaProjects/clojure-news/src/cljs/controller/user.cljs", :line 10, :column 7, :end-line 10, :end-column 14, :arglists (quote ([response]))}, :name controller.user/handler, :variadic false, :file "src/cljs/controller/user.cljs", :end-column 14, :method-params ([response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([response]))}, error-handler {:protocol-inline nil, :meta {:file "/Users/ertugrulcetin/IdeaProjects/clojure-news/src/cljs/controller/user.cljs", :line 14, :column 7, :end-line 14, :end-column 20, :arglists (quote ([{:keys [response]}]))}, :name controller.user/error-handler, :variadic false, :file "src/cljs/controller/user.cljs", :end-column 20, :method-params ([p__25051]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [response]}]))}, user {:protocol-inline nil, :meta {:file "/Users/ertugrulcetin/IdeaProjects/clojure-news/src/cljs/controller/user.cljs", :line 18, :column 7, :end-line 18, :end-column 11, :arglists (quote ([username]))}, :name controller.user/user, :variadic false, :file "src/cljs/controller/user.cljs", :end-column 11, :method-params ([username]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([username]))}}, :require-macros {secretary secretary.core, secretary.core secretary.core, r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:response :format :keywords? :response-format :error-handler :error :handler}, :order [:response :error :handler :error-handler :format :response-format :keywords?]}, :doc nil}